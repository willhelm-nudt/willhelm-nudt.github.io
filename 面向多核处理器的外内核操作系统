内存管理模块初始化的工作：检测系统可用物理内存大小，建立二级页表映射极值、分配页面管理数组、分配进程管理数组、建立物理空闲页面链表，建立进程管理数组映射、建立页面管理数组映射，建立内核地址空间映射，建立内核栈映射，开启分页机制，检测页表映射机制和空闲物理页面链表检测等。
初始化用户环境：空间进程链表建立，IDT表建立
初始化多任务平台：中断控制器初始化
#内存管理设计
内存管理系统设计需要考虑两个关键问题：内存保护和地址转换。内存保护是防止一个进程访问另一个进程或操作系统的内存空间，主要包括进程间保护和特权级保护。地址转换提高了操作系统为进程分配空间的灵活性，主要包括分段机制和分页极值。在地址转换过程中，可以让某部分物理地址空间不与任何虚拟地址空间建立映射管理，来保护物理内存。
内存管理主要有三个部分：地址转换、物理内存管理和虚拟内存管理。
将物理内存划分为大小相等的4KB页面，包括建立页面管理所需要的相关数据结构、页面的分配和回收、空闲页面的管理等，用物理内存分配器来分配和释放内存，以页为操作单元。分配器需要数据结构记录哪个物理页是空闲的，哪个物理页是已分配的，有多少进程正在共享每个分配的物理页面。内存管理模块需要向其他子模块提供物理页面的分配和释放接口。
虚拟内存管理主要是建立页面目录表和页表，将内核和用户软件实用的虚拟地址映射到物理内存地址。当CPU需要使用内存时，由硬件内存管理单元通过查询页表进行映射。
##地址转换
简化内核映射管理，将整个物理内存与虚拟地址区域一一对应，0xF0000000,0xFFFFFFFF。便于实现但是内存最大为256M，可通过修改内核映射关系来实现系统对更大物理内存的支持。内核利用二级页表机制，通过内核虚拟地址来访问对应的物理内存。
##物理内存管理
###物理页面跟踪
每个物理页面对应一个struct Page页面管理结构。将所有物理页面对应的页面管理结构存放在数组pages中；将空闲页面对应的管理结构连接成一个双向链表。
###临时物理内存分配器
需要为几个重要的内核结构分配物理内存。例如系统页面目录表，页面管理节点数组和进程管理节点数组，采用临时物理内存分配器来实现。
###物理页面管理结构初始化
将系统正在使用的物理内存，如BIOS和IDT占用内存，为IO操作预留内存，内核代码占用内存，内核所用数据结构占用内存等的引用标志设置为1，其他空闲物理内存对应管理节点链入空闲物理页面链表中，并将其引用标志位设置为0.
###分配物理页面
检查空闲页面管理列表是否为空，不为空就从链表头摘下一个物理页面管理结点，并将该管理结点所有数据项清空。但是具体物理页面的清空操作和页面管理结点中引用标识的设置由调用者操作。
###释放物理页面
将物理页面对应的管理节点中的引用标识值减一，并检查其引用标识值是否为0，如果为0，表示该物理页面没有任何进程在使用，将页面管理结点插入到空闲物理页面链表的链表头中。
##虚拟内存管理
由于与用户程序共享4G虚拟内存空间，当控制流从用户态陷入到内核态时，不需要切换寄存器cr3，也不需要刷新TLB，大大减少cache miss.
###虚拟内存地址空间布局
虚拟地址空间不但实现内核虚拟地址空间和进程虚拟地址空间的隔离，还实现不同进程虚拟地址空间的隔离。32位线性地址空间分为两部分：用户环境（用户进程）控制低端内存区域（0x0,0xEF800000）的布局和映射，内核控制高端内存区域(0xEF800000,0xFFFFFFFF)的布局和映射。用户虚拟内存地址空间主要包括程序段、数据段、堆段、普通用户栈，用户异常栈等。内核虚拟地址空间用于内核代码和数据的256M虚拟地址空间（0xF0000000,0xFFFFFFFF）,用于当前进程页目录表和页表的4MB虚拟地址空间(0xEFC00000,0xF0000000)和(0xEF400000,0xEF800000),用于内核栈32KB的虚拟内存地址(OxEFBF8000,0xEFC00000),内核栈栈顶虚拟地址是KSTACKTOP，值为0xEFC00000。页面管理和进程管理结构信息以只读方式提供给用户层，存于内核的数据段，用于无须陷入内核便可访问这些重要信息，提高系统性能。
采用数组VPT访问所有页面对应的页表项。
###基于分页机制页面映射管理
增删改查建立映射
#第四章 进程管理设计
envs数组存储所有进程管理节点。空闲进程管理结点通过双向列表进行管理。
进程可以在特权级切换，进程间也可以切换。采用一个结构体来存储。进程状态空闲 可运行 就绪。不可运行处于阻塞。
##进程基本操作
创建、销毁和调度。
###进程创建
分为两步：1.为该进程分配虚拟地址空间和空闲进程管理节点；2.将用户态程序的二进制镜像加载到内存中，设置程序入口点。
详细过程：
（1）分配一个空闲的进程管理结点并对相关字段进行初始化。
（2）用户进程虚拟地址空间初始化
（3）装载二进制镜像
###进程调度
处理重复切换到当前进程。如果待运行进程不是当前进程；如果待运行进程就是当前进程。
###进程销毁
释放并设置为NULL
##上下文切换
进程状态切换或者进程切换时，导致进程上下文相关寄存器值变化的行为。基本过车功能是一个进程通过中断机制陷入内核，内核将该进程的上下文保存在内存中，内核按一定调度策略选择下一个待运行进程。
##中断与异常
将处理器从用户态转移到内核态。为了确保这些控制转移的安全性，处理器的中断或异常机制必须限制发生中断或异常时正在执行代码转移到内核的入口点以及进入内核的方式。使用中断描述符号表和任务状态段两种机制来提供保护。
为了简化内核设计，进入内核立即关闭中断，不支持内核抢占。用户态进程利用中断或异常与内核进行交互，如陷入内核，使用硬件资源。处理器必须确保中断和异常陷入内核的入口点是一些特定的并定义好的，内核自身确定入口点，中断和异常发生时正在运行的代码不能决定入口点。
处理器需要保存两个重要信息：1）保存将被终端或发生异常的程序状态。2）保护保存处理器状态的内核栈，防止非特权用户态代码访问。使用任务状态段中的堆栈段寄存器SS和堆栈指针ESP来定义内核栈。当处理器从用户态切换到内核态时，处理器利用该信息进行栈切换。
###基于异常处理的操作系统原语
###用户态进程创建
采用写时复制机制来推迟甚至免除复制数据，不是复制整个进程地址空间，而是让父进程和子进程以只读方式共享所有父进程实用的物理页面，在需要向页面写入数据时，页面才会被复制。
##进程间通信
（1）消息原语设计
send 和 receive 
（2）消息结构：发送者进程|VALUE|页面映射地址|页面访问权限
（3）进程间通信实现
#多核处理器实现
##资源管理
处理器专用数据结构
##同步与互斥
###原子性操作
硬件指令
#内核锁设计
定义整个操作系统内核为一个互斥区域，采用大内核锁。递归而不会互斥。
###内核锁实现
#文件系统
内核提供磁盘资源保护并将磁盘块暴露给用户空间，位于用户空间的文件系统进程可以管理磁盘数据空间组织方式、磁盘块的分配访问、缓存等，对磁盘性能有更高要求的用户进程可以实现自身特定的文件系统进程。
##文件系统数据结构和相关函数
采用树形结构，所有文件的元数据存储在根目录下。允许用户空间进程直接读取目录的元数据，用户程序可以直接执行目录扫描工作，而不需要额外的文件系统调用执行目录扫描。
#文件系统进程和用户进程的通信
每个用户进程维护一个“文件描述符表”。
